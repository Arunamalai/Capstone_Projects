#Project Title:AgriData Explorer: Understanding Indian agriculture with EDA
import pandas as pd
data=pd.read_csv("C:/Users/Arunamalai/Downloads/ICRISAT-District Level Data - ICRISAT-District Level Data.csv")
data
data.info()
data.isnull().sum()
data.describe()
data[data<0]=0
print(data)
data.loc[:, data.select_dtypes(include=['number']).columns] = data.select_dtypes(include=['number']).applymap(lambda x: 0 if x < 0 else x)
print(data)
contains_hyphen = data.applymap(lambda x: '-' in str(x))

print("Does the DataFrame contain the hyphen (-)?")
print(contains_hyphen)
a=data.groupby('State Name')
print(a.ngroups)
print(a.size())
a=data.groupby('State Name').agg({'RICE YIELD (Kg per ha)':'mean'})
a.apply(display)
a=data.groupby(['State Name','Dist Name']).agg({'RICE YIELD (Kg per ha)':['mean','count']})
display(a)
a=data[data['RICE AREA (1000 ha)']>1000]
display(a)
data['Dist Code']=data['Dist Code'].astype('string')
data['State Code']=data['State Code'].astype('string')
data['Dist Code'].str.upper()
print(data)
data.columns = data.columns.str.upper()
data['State Name'].unique()
print(data['COTTON AREA (1000 HA)'].max())
print(data['COTTON AREA (1000 HA)'].min())
data = data.applymap(lambda x: x.rstrip() if isinstance(x, str) else x)#Removing trailing space in string columns for full dataframe
print(data)
data[data.duplicated()]
%pip install seaborn

import seaborn as sns
import matplotlib.pyplot as plt

# Assuming 'df' is your DataFrame with columns 'year' and 'rice_production'
sns.boxplot(data=data, x='YEAR', y='RICE PRODUCTION (1000 TONS)')

# Add titles and labels
plt.title('Distribution of Rice Production by Year')
plt.xlabel('YEAR')
plt.ylabel('RICE PRODUCTION (1000 TONS)')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Assuming 'df' is your DataFrame with columns 'year' and 'rice_production'
sns.boxplot(data=data, x='YEAR', y='RICE PRODUCTION (1000 TONS)')

# Add titles and labels
plt.title('Distribution of Rice Production by Year')
plt.xlabel('YEAR')
plt.ylabel('RICE PRODUCTION (1000 TONS)')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.show()

sns.violinplot(data=past_20_year_data, x='YEAR', y='RICE PRODUCTION (1000 TONS)')
plt.title('Distribution of Rice Production for the Past 20 Years')
plt.xlabel('Year')
plt.ylabel('Rice Production')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.show()

a=data.groupby('YEAR')
print(a.ngroups)
print(a.size())
%pip install scipy

import scipy.stats as stats

# Assuming 'df' is your DataFrame with columns 'rice_production' and 'rice_area'

# Calculate the Pearson correlation between 'rice_production' and 'rice_area'
correlation, _ = stats.pearsonr(data['RICE PRODUCTION (1000 TONS)'], data['RICE AREA (1000 HA)'])

# Print the correlation, rounded to 4 decimal places
print(round(correlation, 2))#output nearly 1. so there is positive correlation between rice_production' and 'rice_area

import scipy.stats as stats

# Assuming 'df' is your DataFrame with columns 'rice_production' and 'rice_area'

# Calculate the Pearson correlation between 'rice_production' and 'rice_area'
correlation, _ = stats.pearsonr(data['WHEAT AREA (1000 HA)'], data['POTATOES AREA (1000 HA)'])

# Print the correlation, rounded to 4 decimal places
print(round(correlation, 2))#(nearly 0 there is no correlation)

import seaborn as sns
import matplotlib.pyplot as plt
numeric_data = data.select_dtypes(include=[float, int])  # Select only numeric columns

# Now calculate the correlation matrix

correlation_matrix = numeric_data.corr()

plt.figure(figsize=(50, 50)) # Adjust figure size as needed
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix Heatmap')
plt.show()

%pip install statsmodels

from statsmodels.stats.weightstats import ztest as ztest
import scipy.stats as stats

data1=data['RICE PRODUCTION (1000 TONS)']
data2=data['RICE AREA (1000 HA)']

print(ztest(data1,data2,value=0))
print(stats.ttest_ind(a=data1, b=data2, equal_var=True))

from statsmodels.stats.weightstats import ztest as ztest
import scipy.stats as stats

data1=data['RICE PRODUCTION (1000 TONS)']
data2=data['WHEAT PRODUCTION (1000 TONS)']

print(ztest(data1,data2,value=0))
print(stats.ttest_ind(a=data1, b=data2, equal_var=True))

import scipy.stats as stats

# Assuming 'data' is your DataFrame with columns 'STATE NAME' and 'RICE PRODUCTION (1000 TONS)'

# Perform one-way ANOVA to check if rice production differs across states
f_stat, p_value = stats.f_oneway(
    *(data[data['STATE NAME'] == state]['RICE PRODUCTION (1000 TONS)'] for state in data['STATE NAME'].unique())
)

# Print the F-statistic and p-value
print(f"F-statistic: {f_stat}, p-value: {p_value}")# opt:there are dependent(there is a connection bt STATE NAME' and 'RICE PRODUCTION)


data1 = data.iloc[:,[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]] 
data1

data2 = data.iloc[:,[0,1,2,3,4,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]] 
data2
data3=data.iloc[:,[0,1,2,3,4,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58]]
data3

data4=data.iloc[:,[0,1,2,3,4,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79]]
data4

%pip install mysql-connector-python

import mysql.connector

connection = mysql.connector.connect(
  host = "gateway01.ap-southeast-1.prod.aws.tidbcloud.com",
  port = 4000,
  user = "3sqybL7f77eBaEc.root",
  password = "1ZeuUOPIkdgfGfnY",
  database = "Capstone"
)
mycursor=connection.cursor()

mycursor.execute("""
CREATE TABLE data1 (
    `DIST CODE` VARCHAR(255),
    `YEAR` INT(4),
    `STATE CODE` VARCHAR(255),
    `STATE NAME` VARCHAR(255),
    `DIST NAME` VARCHAR(255),
    `RICE AREA (1000 HA)` FLOAT,
    `RICE PRODUCTION (1000 TONS)` FLOAT,
    `RICE YIELD (KG PER HA)` FLOAT,
    `WHEAT AREA (1000 HA)` FLOAT,
    `WHEAT PRODUCTION (1000 TONS)` FLOAT,
    `WHEAT YIELD (KG PER HA)` FLOAT,
    `KHARIF SORGHUM AREA (1000 HA)` FLOAT,
    `KHARIF SORGHUM PRODUCTION (1000 TONS)` FLOAT,
    `KHARIF SORGHUM YIELD (KG PER HA)` FLOAT,
    `RABI SORGHUM AREA (1000 HA)` FLOAT,
    `RABI SORGHUM PRODUCTION (1000 TONS)` FLOAT,
    `RABI SORGHUM YIELD (KG PER HA)` FLOAT,
    `SORGHUM AREA (1000 HA)` FLOAT,
    `SORGHUM PRODUCTION (1000 TONS)` FLOAT,
    `SORGHUM YIELD (KG PER HA)` FLOAT
)
""")

import pandas as pd
import mysql.connector

def insert_dataframe_into_sql(df, connection, table_name):
    """
    Inserts a Pandas DataFrame into an SQL table.

    Args:
        df: The Pandas DataFrame to insert.
        connection: An active MySQLdb connection object.
        table_name: The name of the table to insert into.
    """
    mycursor = connection.cursor()

    # Efficiently insert data in chunks
    chunk_size = 1000  # Adjust chunk size based on your database and network
    for i in range(0, len(df), chunk_size):
        chunk = df[i:i + chunk_size]
        values = []
        for index, row in chunk.iterrows():
            # Replace NaN with None for SQL compatibility
            row = row.where(pd.notna(row), None)  
            values.append(tuple(row))

        # Escape column names with backticks to handle special characters like spaces and parentheses
        columns = ', '.join([f"`{col}`" for col in df.columns])  # Add backticks around column names

        # Create placeholders for the SQL query
        placeholders = ', '.join(['%s'] * len(df.columns))
        
        sql = f"INSERT INTO `{table_name}` ({columns}) VALUES ({placeholders})"

        try:
            # Insert the values in bulk
            mycursor.executemany(sql, values)
            connection.commit()  # Commit after each chunk for better performance and resilience
        except mysql.connector.Error as err:
            print(f"Error inserting chunk: {err}")
            connection.rollback()  # Rollback the transaction if an error occurs

    mycursor.close()

# Example of how to use the function
# Assuming you already have a connection object and your DataFrame `data1`
# Insert the DataFrame into the 'data1' table

insert_dataframe_into_sql(data1, connection, 'data1')

# Close the connection after the insert
connection.close()

mycursor.execute("""CREATE TABLE data2 (
    `DIST CODE` VARCHAR(255),
    `YEAR` INT(4),
    `STATE CODE` VARCHAR(255),
    `STATE NAME` VARCHAR(255),
    `DIST NAME` VARCHAR(255),
    `PEARL MILLET AREA (1000 HA)` FLOAT,
    `PEARL MILLET PRODUCTION (1000 TONS)` FLOAT,
    `PEARL MILLET YIELD (KG PER HA)` FLOAT,
    `MAIZE AREA (1000 HA)` FLOAT,
    `MAIZE PRODUCTION (1000 TONS)` FLOAT,
    `MAIZE YIELD (KG PER HA)` FLOAT,
    `FINGER MILLET AREA (1000 HA)` FLOAT,
    `FINGER MILLET PRODUCTION (1000 TONS)` FLOAT,
    `FINGER MILLET YIELD (KG PER HA)` FLOAT,
    `BARLEY AREA (1000 HA)` FLOAT,
    `BARLEY PRODUCTION (1000 TONS)` FLOAT,
    `BARLEY YIELD (KG PER HA)` FLOAT,
    `CHICKPEA AREA (1000 HA)` FLOAT,
    `CHICKPEA PRODUCTION (1000 TONS)` FLOAT,
    `CHICKPEA YIELD (KG PER HA)` FLOAT,
    `PIGEONPEA AREA (1000 HA)` FLOAT,
    `PIGEONPEA PRODUCTION (1000 TONS)` FLOAT,
    `PIGEONPEA YIELD (KG PER HA)` FLOAT)"""
)

import pandas as pd
import mysql.connector

def insert_dataframe_into_sql(df, connection, table_name):
    """
    Inserts a Pandas DataFrame into an SQL table.

    Args:
        df: The Pandas DataFrame to insert.
        connection: An active MySQLdb connection object.
        table_name: The name of the table to insert into.
    """
    mycursor = connection.cursor()

    # Efficiently insert data in chunks
    chunk_size = 1000  # Adjust chunk size based on your database and network
    for i in range(0, len(df), chunk_size):
        chunk = df[i:i + chunk_size]
        values = []
        for index, row in chunk.iterrows():
            # Replace NaN with None for SQL compatibility
            row = row.where(pd.notna(row), None)  
            values.append(tuple(row))

        # Escape column names with backticks to handle special characters like spaces and parentheses
        columns = ', '.join([f"`{col}`" for col in df.columns])  # Add backticks around column names

        # Create placeholders for the SQL query
        placeholders = ', '.join(['%s'] * len(df.columns))
        
        sql = f"INSERT INTO `{table_name}` ({columns}) VALUES ({placeholders})"

        try:
            # Insert the values in bulk
            mycursor.executemany(sql, values)
            connection.commit()  # Commit after each chunk for better performance and resilience
        except mysql.connector.Error as err:
            print(f"Error inserting chunk: {err}")
            connection.rollback()  # Rollback the transaction if an error occurs

    mycursor.close()

# Example of how to use the function
# Assuming you already have a connection object and your DataFrame `data1`
# Insert the DataFrame into the 'data1' table

insert_dataframe_into_sql(data2, connection, 'data2')

# Close the connection after the insert
connection.close()

mycursor.execute("""CREATE TABLE data3 (
    `DIST CODE` VARCHAR(255),
    `YEAR` INT(4),
    `STATE CODE` VARCHAR(255),
    `STATE NAME` VARCHAR(255),
    `DIST NAME` VARCHAR(255),
    `MINOR PULSES AREA (1000 HA)` FLOAT,
    `MINOR PULSES PRODUCTION (1000 TONS)` FLOAT,
    `MINOR PULSES YIELD (KG PER HA)` FLOAT,
    `GROUNDNUT AREA (1000 HA)` FLOAT,
    `GROUNDNUT PRODUCTION (1000 TONS)` FLOAT,
    `GROUNDNUT YIELD (KG PER HA)` FLOAT,
    `SESAMUM AREA (1000 HA)` FLOAT,
    `SESAMUM PRODUCTION (1000 TONS)` FLOAT,
    `SESAMUM YIELD (KG PER HA)` FLOAT,
    `RAPESEED AND MUSTARD AREA (1000 HA)` FLOAT,
    `RAPESEED AND MUSTARD PRODUCTION (1000 TONS)` FLOAT,
    `RAPESEED AND MUSTARD YIELD (KG PER HA)` FLOAT,
    `SAFFLOWER AREA (1000 HA)` FLOAT,
    `SAFFLOWER PRODUCTION (1000 TONS)` FLOAT,
    `SAFFLOWER YIELD (KG PER HA)` FLOAT,
    `CASTOR AREA (1000 HA)` FLOAT,
    `CASTOR PRODUCTION (1000 TONS)` FLOAT,
    `CASTOR YIELD (KG PER HA)` FLOAT,
    `LINSEED AREA (1000 HA)` FLOAT,
    `LINSEED PRODUCTION (1000 TONS)` FLOAT,
    `LINSEED YIELD (KG PER HA)` FLOAT)"""
)

import pandas as pd
import mysql.connector

def insert_dataframe_into_sql(df, connection, table_name):
    """
    Inserts a Pandas DataFrame into an SQL table.

    Args:
        df: The Pandas DataFrame to insert.
        connection: An active MySQLdb connection object.
        table_name: The name of the table to insert into.
    """
    mycursor = connection.cursor()

    # Efficiently insert data in chunks
    chunk_size = 1000  # Adjust chunk size based on your database and network
    for i in range(0, len(df), chunk_size):
        chunk = df[i:i + chunk_size]
        values = []
        for index, row in chunk.iterrows():
            # Replace NaN with None for SQL compatibility
            row = row.where(pd.notna(row), None)  
            values.append(tuple(row))

        # Escape column names with backticks to handle special characters like spaces and parentheses
        columns = ', '.join([f"`{col}`" for col in df.columns])  # Add backticks around column names

        # Create placeholders for the SQL query
        placeholders = ', '.join(['%s'] * len(df.columns))
        
        sql = f"INSERT INTO `{table_name}` ({columns}) VALUES ({placeholders})"

        try:
            # Insert the values in bulk
            mycursor.executemany(sql, values)
            connection.commit()  # Commit after each chunk for better performance and resilience
        except mysql.connector.Error as err:
            print(f"Error inserting chunk: {err}")
            connection.rollback()  # Rollback the transaction if an error occurs

    mycursor.close()

# Example of how to use the function
# Assuming you already have a connection object and your DataFrame `data1`
# Insert the DataFrame into the 'data1' table

insert_dataframe_into_sql(data3, connection, 'data3')

# Close the connection after the insert
connection.close()

mycursor.execute("""CREATE TABLE data4 (
    `DIST CODE` VARCHAR(255),
    `YEAR` INT(4),
    `STATE CODE` VARCHAR(255),
    `STATE NAME` VARCHAR(255),
    `DIST NAME` VARCHAR(255),
    `SUNFLOWER AREA (1000 HA)` FLOAT,
    `SUNFLOWER PRODUCTION (1000 TONS)` FLOAT,
    `SUNFLOWER YIELD (KG PER HA)` FLOAT,
    `SOYABEAN AREA (1000 HA)` FLOAT,
    `SOYABEAN PRODUCTION (1000 TONS)` FLOAT,
    `SOYABEAN YIELD (KG PER HA)` FLOAT,
    `OILSEEDS AREA (1000 HA)` FLOAT,
    `OILSEEDS PRODUCTION (1000 TONS)` FLOAT,
    `OILSEEDS YIELD (KG PER HA)` FLOAT,
    `SUGARCANE AREA (1000 HA)` FLOAT,
    `SUGARCANE PRODUCTION (1000 TONS)` FLOAT,
    `SUGARCANE YIELD (KG PER HA)` FLOAT,
    `COTTON AREA (1000 HA)` FLOAT,
    `COTTON PRODUCTION (1000 TONS)` FLOAT,
    `COTTON YIELD (KG PER HA)` FLOAT,
    `FRUITS AREA (1000 HA)` FLOAT,
    `VEGETABLES AREA (1000 HA)` FLOAT,
    `FRUITS AND VEGETABLES AREA (1000 HA)` FLOAT,
    `POTATOES AREA (1000 HA)` FLOAT,
    `ONION AREA (1000 HA)` FLOAT,
    `FODDER AREA (1000 HA)` FLOAT)"""
)

import pandas as pd
import mysql.connector

def insert_dataframe_into_sql(df, connection, table_name):
    """
    Inserts a Pandas DataFrame into an SQL table.

    Args:
        df: The Pandas DataFrame to insert.
        connection: An active MySQLdb connection object.
        table_name: The name of the table to insert into.
    """
    mycursor = connection.cursor()

    # Efficiently insert data in chunks
    chunk_size = 1000  # Adjust chunk size based on your database and network
    for i in range(0, len(df), chunk_size):
        chunk = df[i:i + chunk_size]
        values = []
        for index, row in chunk.iterrows():
            # Replace NaN with None for SQL compatibility
            row = row.where(pd.notna(row), None)  
            values.append(tuple(row))

        # Escape column names with backticks to handle special characters like spaces and parentheses
        columns = ', '.join([f"`{col}`" for col in df.columns])  # Add backticks around column names

        # Create placeholders for the SQL query
        placeholders = ', '.join(['%s'] * len(df.columns))
        
        sql = f"INSERT INTO `{table_name}` ({columns}) VALUES ({placeholders})"

        try:
            # Insert the values in bulk
            mycursor.executemany(sql, values)
            connection.commit()  # Commit after each chunk for better performance and resilience
        except mysql.connector.Error as err:
            print(f"Error inserting chunk: {err}")
            connection.rollback()  # Rollback the transaction if an error occurs

    mycursor.close()

# Example of how to use the function
# Assuming you already have a connection object and your DataFrame `data1`
# Insert the DataFrame into the 'data1' table

insert_dataframe_into_sql(data4, connection, 'data4')

# Close the connection after the insert
connection.close()

%pip install tabulate

#1.Top 7 RICE PRODUCTION State Data(Bar_plot)
mycursor.execute("""
    SELECT `STATE NAME`, SUM(`RICE PRODUCTION (1000 TONS)`) AS `TOTAL_RICE_PRODUCTION`
    FROM data1
    GROUP BY `STATE NAME`
    ORDER BY `TOTAL_RICE_PRODUCTION` DESC
    LIMIT 7
""")
out=mycursor.fetchall()
from tabulate import tabulate
print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))

#2.Top 5 Wheat Producing States Data(Bar_chart)and its percentage(%)(Pie_chart)
mycursor.execute("""
    SELECT `STATE NAME`, SUM(`WHEAT PRODUCTION (1000 TONS)`) AS `TOTAL_WHEAT_PRODUCTION`
    FROM data1
    GROUP BY `STATE NAME`
    ORDER BY `TOTAL_WHEAT_PRODUCTION` DESC
    LIMIT 5
""")
out=mycursor.fetchall()
from tabulate import tabulate
print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))

#3.Oil seed production by top 5 states
mycursor.execute("""
    SELECT `STATE NAME`, SUM(`OILSEEDS PRODUCTION (1000 TONS)`) AS `TOTAL_OILSEEDS_PRODUCTION`
    FROM data4
    GROUP BY `STATE NAME`
    ORDER BY `TOTAL_OILSEEDS_PRODUCTION` DESC
    LIMIT 5
""")
out=mycursor.fetchall()
from tabulate import tabulate
print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))

#4.Top 7 SUNFLOWER PRODUCTION  State
mycursor.execute("""
    SELECT `STATE NAME`, SUM(`SUNFLOWER PRODUCTION (1000 TONS)`) AS `TOTAL_SUNFLOWER_PRODUCTION`
    FROM data4
    GROUP BY `STATE NAME`
    ORDER BY `TOTAL_SUNFLOWER_PRODUCTION` DESC
    LIMIT 7
""")
out=mycursor.fetchall()
from tabulate import tabulate
print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))

#5.India's SUGARCANE PRODUCTION From Last 50 Years(Line_plot)
mycursor.execute("""
    SELECT `YEAR`, SUM(`SUGARCANE PRODUCTION (1000 TONS)`) AS `TOTAL_SUGARCANE_PRODUCTION`
    FROM data4
    GROUP BY `YEAR`
    ORDER BY `YEAR` DESC
    LIMIT 50
""")
out=mycursor.fetchall()
from tabulate import tabulate
print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))


#6.Rice Production Vs Wheat Production (Last 50y)
mycursor.execute("""SELECT `YEAR`, 
       SUM(`RICE PRODUCTION (1000 TONS)`) AS `TOTAL_RICE_PRODUCTION`, 
       SUM(`WHEAT PRODUCTION (1000 TONS)`) AS `TOTAL_WHEAT_PRODUCTION`
FROM data1
GROUP BY `YEAR`
ORDER BY `YEAR` DESC
LIMIT 50""")
out=mycursor.fetchall()
from tabulate import tabulate
print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))

#7.Rice Production By West Bengal Districts
mycursor.execute("""SELECT `STATE NAME`, `DIST NAME`, `RICE PRODUCTION (1000 TONS)` AS `TOTAL_RICE_PRODUCTION`
FROM `data1`
WHERE `STATE NAME` = 'West Bengal'""")
out=mycursor.fetchall()
from tabulate import tabulate
print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))

#8.Top 10 Wheat Production Years From UP
mycursor.execute("""SELECT `YEAR`, `STATE NAME`, SUM(`WHEAT PRODUCTION (1000 TONS)`) AS `TOTAL_WHEAT_PRODUCTION`
FROM `data1`
WHERE `STATE NAME` = 'Uttar Pradesh'
GROUP BY `YEAR`
ORDER BY `TOTAL_WHEAT_PRODUCTION` DESC
LIMIT 10""")
out=mycursor.fetchall()
from tabulate import tabulate
print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))

#9.Millet Production (Last 50y)
mycursor.execute("""SELECT `YEAR`, 
       SUM(`PEARL MILLET PRODUCTION (1000 TONS)`) AS `TOTAL_PEARL_MILLET_PRODUCTION`, 
       SUM(`FINGER MILLET PRODUCTION (1000 TONS)`) AS `TOTAL_FINGER_MILLET_PRODUCTION` 
FROM `data2`
GROUP BY `YEAR`
ORDER BY `YEAR` DESC
LIMIT 50""")
out=mycursor.fetchall()
from tabulate import tabulate
print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))

#10.Sorghum Production (Kharif and Rabi) by Region
mycursor.execute("""SELECT `STATE NAME`, 
       SUM(`KHARIF SORGHUM PRODUCTION (1000 TONS)`) AS `TOTAL_KHARIF_SORGHUM_PRODUCTION`, 
       SUM(`RABI SORGHUM PRODUCTION (1000 TONS)`) AS `TOTAL_RABI_SORGHUM_PRODUCTION`
FROM `data1`
GROUP BY `STATE NAME`""")
out=mycursor.fetchall()
from tabulate import tabulate
print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))


#11.Top 7 States for Groundnut Production
mycursor.execute("""SELECT `STATE NAME`, 
       SUM(`GROUNDNUT PRODUCTION (1000 TONS)`) AS `TOTAL_GROUNDNUT_PRODUCTION`
FROM `data3`
GROUP BY `STATE NAME`
ORDER BY `TOTAL_GROUNDNUT_PRODUCTION` DESC
LIMIT 7 """)
out=mycursor.fetchall()
from tabulate import tabulate
print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))

#12.Soybean Production by Top 5 States and Yield Efficiency
mycursor.execute("""SELECT `STATE NAME`, 
       SUM(`SOYABEAN PRODUCTION (1000 TONS)`) AS `TOTAL_SOYABEAN_PRODUCTION`,
       SUM(`SOYABEAN AREA (1000 HA)`) AS `TOTAL_SOYABEAN_AREA`,
       (SUM(`SOYABEAN PRODUCTION (1000 TONS)`) / SUM(`SOYABEAN AREA (1000 HA)`)) AS `YIELD_EFFICIENCY`
FROM `data4`
GROUP BY `STATE NAME`
ORDER BY `TOTAL_SOYABEAN_PRODUCTION` DESC
LIMIT 5""")
out=mycursor.fetchall()
from tabulate import tabulate
print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))

#13.Oilseed Production in Major States
mycursor.execute("""SELECT `STATE NAME`, 
       SUM(`OILSEEDS PRODUCTION (1000 TONS)`) AS `TOTAL_OILSEED_PRODUCTION`,
       SUM(`OILSEEDS AREA (1000 HA)`) AS `TOTAL_OILSEED_AREA`
FROM `data4`
GROUP BY `STATE NAME`
ORDER BY `TOTAL_OILSEED_PRODUCTION` DESC
LIMIT 5""")
out=mycursor.fetchall()
from tabulate import tabulate
print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))

#14.Rice vs. Wheat Yield Across States
mycursor.execute("""SELECT 
    `STATE NAME`, 
    SUM(`RICE YIELD (KG PER HA)`) As TOTAL_RICE_YIELD, 
    SUM(`WHEAT YIELD (KG PER HA)`)As TOTAL_WHEAT_YIELD 
FROM 
    data1 
GROUP BY 
    `STATE NAME`""")
out=mycursor.fetchall()
from tabulate import tabulate
print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))

#15.Impact of Area Cultivated on Production (Rice, Wheat, Maize)
mycursor.execute("""SELECT d1.`STATE NAME`,
(SUM(d1.`RICE PRODUCTION (1000 TONS)`) / SUM(d1.`RICE AREA (1000 HA)`)) AS `RICE_YIELD_EFFICIENCY`, 
(SUM(d1.`WHEAT PRODUCTION (1000 TONS)`) / SUM(d1.`WHEAT AREA (1000 HA)`)) AS `WHEAT_YIELD_EFFICIENCY`,
(SUM(d2.`MAIZE PRODUCTION (1000 TONS)`) / SUM(d2.`MAIZE AREA (1000 HA)`)) AS `MAIZE_YIELD_EFFICIENCY`
FROM `data1`d1 INNER JOIN `data2`d2 ON d1.`STATE NAME`=d2.`STATE NAME`
GROUP BY `STATE NAME`
""")
out=mycursor.fetchall()
from tabulate import tabulate
print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))

#16.Year-wise Trend of Rice Production Across States (Top 3)
mycursor.execute("""SELECT 
    `YEAR`, 
    `STATE NAME`, 
    SUM(`RICE YIELD (KG PER HA)`) AS Rice_Yield 
FROM 
    data1 
GROUP BY 
    `YEAR`, `STATE NAME`
ORDER BY 
    Rice_Yield DESC
LIMIT 3""")
out=mycursor.fetchall()
from tabulate import tabulate
print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))

#17.District-wise Correlation Between Area and Production for Major Crops (Rice, Wheat
import pandas as pd

# Assuming you've already run this query:
mycursor.execute("""
SELECT
    `STATE NAME`,
    `DIST NAME`,
    `YEAR`,
    `RICE AREA (1000 HA)`, `RICE PRODUCTION (1000 TONS)`,
    `WHEAT AREA (1000 HA)`, `WHEAT PRODUCTION (1000 TONS)`
FROM data1
""")

# Load into DataFrame
df = pd.DataFrame(mycursor.fetchall(), columns=[i[0] for i in mycursor.description])


correlations = []

for (state, district), group in df.groupby(['STATE NAME', 'DIST NAME']):
    row = {'STATE NAME': state, 'DIST NAME': district}

    # Rice correlation
    rice_data = group[['RICE AREA (1000 HA)', 'RICE PRODUCTION (1000 TONS)']].dropna()
    if len(rice_data) > 1:
        row['Rice Corr'] = rice_data.corr().iloc[0, 1]
    else:
        row['Rice Corr'] = None

    # Wheat correlation
    wheat_data = group[['WHEAT AREA (1000 HA)', 'WHEAT PRODUCTION (1000 TONS)']].dropna()
    if len(wheat_data) > 1:
        row['Wheat Corr'] = wheat_data.corr().iloc[0, 1]
    else:
        row['Wheat Corr'] = None

    correlations.append(row)

corr_df = pd.DataFrame(correlations)


from tabulate import tabulate
print(tabulate(corr_df.head(10), headers='keys', tablefmt='psql'))


mycursor.execute("""WITH top_states AS (
    SELECT `STATE NAME`
    FROM data4
    GROUP BY `STATE NAME`
    ORDER BY SUM(`COTTON PRODUCTION (1000 TONS)`) DESC
    LIMIT 5
),
yearly_prod AS (
    SELECT 
        `YEAR`,
        `STATE NAME`,
        SUM(`COTTON PRODUCTION (1000 TONS)`) AS Yearly_Production
    FROM data4
    WHERE `STATE NAME` IN (SELECT `STATE NAME` FROM top_states)
    GROUP BY `YEAR`, `STATE NAME`
),
growth_calc AS (
    SELECT 
        `STATE NAME`,
        `YEAR`,
        Yearly_Production,
        LAG(Yearly_Production) OVER (PARTITION BY `STATE NAME` ORDER BY `YEAR`) AS Prev_Year_Production
    FROM yearly_prod
)
SELECT 
    `STATE NAME`,
    `YEAR`,
    Yearly_Production,
    ROUND(((Yearly_Production - Prev_Year_Production) / Prev_Year_Production) * 100, 2) AS Cotton_Growth_Percentage
FROM growth_calc
WHERE Prev_Year_Production IS NOT NULL
ORDER BY `STATE NAME`, `YEAR`
LIMIT 25;""") 
#This will show growth for the top 5 states for the most recent 5 years

out = mycursor.fetchall()
from tabulate import tabulate
print(tabulate(out, headers=[i[0] for i in mycursor.description], tablefmt='psql'))


#19.Districts with the Highest Groundnut Production in 2010
mycursor.execute("""SELECT 
    `DIST NAME`, 
    `YEAR`, 
    SUM(`GROUNDNUT PRODUCTION (1000 TONS)`) AS `GROUNDNUT PRODUCTION`
FROM data3
WHERE `YEAR` = 2010
GROUP BY `DIST NAME`, `YEAR`
ORDER BY `GROUNDNUT PRODUCTION` DESC
LIMIT 10;
""")


from tabulate import tabulate
out = mycursor.fetchall()
print(tabulate(out, headers=[i[0] for i in mycursor.description], tablefmt='psql'))


#20.Total Area Cultivated for Oilseeds in Each State
mycursor.execute("""SELECT 
    `STATE NAME`, 
    SUM(`OILSEEDS AREA (1000 HA)`) AS `Area Cultivated for Oilseeds`
FROM data4
GROUP BY `STATE NAME`
ORDER BY `Area Cultivated for Oilseeds` DESC""")
from tabulate import tabulate
out = mycursor.fetchall()
print(tabulate(out, headers=[i[0] for i in mycursor.description], tablefmt='psql'))
